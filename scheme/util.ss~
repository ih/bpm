#!r6rs
;;TO DO
;;-adjust tree-apply-proc to not be dependent on * as a masking character
;;-use data abstraction for location in tree-apply-proc
(library (util)
         (export all-equal? all-assoc curry all max-take sexp-replace transform-sexp get/make-alist-entry rest pair random-from-range depth tree-apply-proc primitive? non-empty-list? all-subexprs deep-find-all map-apply more-than-one primitives list-unique-commutative-pairs my-mean my-variance thunkify normal-pdf deep-find display-all tagged-list? list-or)
         (import (except (rnrs) string-hash string-ci-hash)
                 (_srfi :1)
                 (_srfi :69)
                 (church readable-scheme))
         (define (display-all . args)
           (for-each display args))
         (define (thunkify sexpr) `(lambda () ,sexpr))
         (define (all-equal? lst)
           (all (map (lambda (itm) (equal? (first lst) itm)) (rest lst))))

         (define (all-assoc alist key)
           (filter (lambda (entry) (equal? (first entry) key)) alist))

         (define (curry fun . const-args)
           (lambda args
             (apply fun (append const-args args))))

         (define (all lst)
           (if (null? lst)
               #t
               (and (first lst)
                    (all (rest lst)))))

         (define (max-take lst n)
           (if (<= (length lst) n)
               lst
               (take lst n)))
         ;;if abstract.ss stops working replace sexp-replace in abstract.ss w/ a function leaf replace (sexp-replace before it was modified to the current version)
         (define (sexp-replace old new sexp)
           (if (equal? old sexp)
               new
               (if (list? sexp)
                   (map (curry sexp-replace old new) sexp)
                   sexp)))
               

         (define (transform-sexp pred? func sexp)
           (if (pred? sexp)
               (func sexp)
               (if (list? sexp)
                   (map (curry transform-sexp pred? func) sexp)
                   sexp)))

         ;;should stop early due to the way or works, not clear what first found instance will be
         (define (deep-find pred? sexp)
           (if (pred? sexp)
               sexp
               (if (list? sexp)
                   (list-or (map (curry deep-find pred?) sexp))
                   (pred? sexp))))

         ;from stack-overflow, takes place of (apply or some-list)
         (define (list-or args)
           (if (null? args)
               #f
               (or (first args) (list-or (rest args)))))


         
         (define (deep-find-all pred? sexp)
           (filter pred? (all-subexprs sexp)))

         (define (primitives expr)
           (if (primitive? expr)
               (list expr)
               (apply append (map primitives expr))))
         ;;does not return primitives, only subexpressions which are lists
         (define (all-subexprs t)
           (let loop ([t (list t)])
             (cond [(null? t) '()]
                   [(primitive? (first t)) (loop (rest t))]
                   [else (pair (first t) (loop (append (first t) (rest t))))])))

                  ;; look up value for key in alist; if not found,
         ;; set (default-thunk) as value and return it
         (define (get/make-alist-entry alist alist-set! key default-thunk)
           (let ([binding (assq key alist)])
             (if binding
                 (rest binding)
                 (let* ([default-val (default-thunk)])
                   (alist-set! key default-val)
                   default-val))))

         (define (random-from-range a b)
           (+ (random-integer (+ (- b a) 1)) a))

         (define (primitive? expr)
           (or (symbol? expr) (boolean? expr) (number? expr) (quoted? expr)))

         (define (non-empty-list? expr)
           (if (list? expr)
               (if (null? expr)
                   #f
                   #t)
               #f))

         (define (more-than-one lst)
           (> (length lst) 1))
         
         (define (quoted? expr)
           (if (non-empty-list? expr)
               (eq? (first expr) 'quote)))
               

         (define (depth tree)
           (if (or (not (list? tree)) (null? tree))
               0
               (+ 1 (apply max (map depth tree)))))

         ;;creates a lambda that performs an apply for the passed in function
         ;;useful for map over arguments produced by some other function
         (define (lambda-apply proc)
           (lambda (arg-list) (apply proc arg-list)))

         (define (map-apply proc arg-lists)
           (map (lambda-apply proc) arg-lists))

         ;;this function copies a tree, but applies proc to the tree at the passed in location.  
         (define (tree-apply-proc proc location tree)
           (define (build-mask location number-of-branches)
             (define (substitute indx value lst)
               (if (= indx 0)
                   (pair value (rest lst))
                   (pair (first lst) (substitute (- indx 1) value (rest lst)))))
             (let ([mask (make-list number-of-branches '*)]
                   [index (- (first location) 1)])
               (if (= (length location) 1)
                   (substitute index '() mask)
                   (substitute index (rest location) mask))))
           
           (cond [(null? tree) tree]
                 [(null? location) (proc tree)]
                 [(eq? location '*) tree]
                 [else
                  (let ([location-mask (build-mask location (length (rest tree)))])
                    (pair (first tree) (map (curry tree-apply-proc proc) location-mask (rest tree))))]))

         ;; Faster way of selecting subsets of a list
         ;; From http://okmij.org/ftp/Scheme/subsets-size-n-part1.txt
         ;; http://okmij.org/ftp/Algorithms.html#subsets-n
         (define (select-k-subsets n l)
           (let loop ((l l) (ln (length l)) (n n) (prev-els '()) (accum '()))
             (cond
               ((<= n 0) (cons prev-els accum))
               ((< ln n) accum)
               ((= ln n) (cons (append l prev-els) accum))
               ((= ln (+ 1 n)) 
                (let fold ((l l) (seen prev-els) (accum accum))
                  (if (null? l) accum
                    (fold (cdr l) (cons (car l) seen)
                          (cons
                            (append (cdr l) seen)
                            accum)))))
               ((= n 1)
                (let fold ((l l) (accum accum))
                  (if (null? l) accum
                    (fold (cdr l) (cons (cons (car l) prev-els) accum)))))
               (else
                 (loop (cdr l) (- ln 1) n prev-els
                       ; new accum
                       (loop (cdr l) (- ln 1) (- n 1) (cons (car l) prev-els) accum))))))

         (define (list-unique-commutative-pairs lst) (select-k-subsets 2 lst))

         ;;from standard-preamble.church
         ;; @desc
         ;; Compute the mean of a list of numbers.
         ;; @param lst The list. 
         ;; @returns number
         (define (my-mean lst) (/ (apply + lst) (length lst)))
         ;; @desc
         ;; Compute the variance of a list of numbers.
         ;; @param lst The list. 
         ;; @returns number
         (define (my-variance lst)
           (let ((mn (my-mean lst)))
             (my-mean (map (lambda (x) (expt (- x mn) 2)) lst))))
         
         (define (normal-pdf x mu sigma) (* (/ 1 (sqrt (* 2 3.1415 (expt sigma 2)))) (exp (- (/ (expt (- x mu) 2) (* 2 (expt sigma 2))))))))

