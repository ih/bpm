(define id (lambda (program . nofilter) (list program)))
(define semantic-preserving-transformations (list id compressions))
(define semantic-changing-transformations (list noisy-number-dearguments recursion-dearguments same-variable-dearguments))
(define SIZE-CONSTANT 1)
(define LAG 10)
(define POPSIZE 50)
;;;searches through transformations of the sexpr (uniform-draw (list [observed data here])) , returns a thunk evaluates a uniforml draws over compressed forms of each observation, here data is a list of factor graphs
(define (learn-model data beam-size depth)
  (let* ([initial-sexpr (make-program '() (incorporate-data data))]
         [learned-program (beam-learn data initial-sexpr beam-size depth)]
         [model (lambda () (lazy-list->all-list ((eval (program->sexpr (desugar learned-program))))))])
    (pretty-print (list "compressed-program:" (program->sexpr learned-program) "size: " (program-size learned-program)))
    (pretty-print (list "desugared program:" (program->sexpr (desugar learned-program))))
    (pretty-print (list "model output " (repeat 3 (lambda () (model)))))
    (draw-trees (pair "./model-output.png" (repeat 20 (lambda () (model)))))
    model))

;;;turns each image into factor-graphs then turns factor-graphs into programs then wraps that in a uniform draw
;;incorporate-data :: images => scheme-program
(define (incorporate-data trees)
  (let* ([tree-expressions (map tree->expression trees)])
    (list 'lambda '() (pair 'uniform-choice tree-expressions))))

;;;returns an sexpr
(define (beam-learn data init-program beam-size depth)
  (let* ([top-transformations 
          (sort-by-posterior
           data 
           (beam-search-transformations data init-program beam-size depth))]
         [db (pretty-print (list "top transformations" top-transformations))])
    (if (null? top-transformations)
        init-program
        (program+->program (first top-transformations)))))

(define (beam-search-transformations data program beam-size depth)
  (let ([init-program+ (make-program+ program 0 (log-likelihood data program POPSIZE) (log-prior program) #f)])
    (depth-iterated-transformations (lambda (programs+) (best-n data programs+ beam-size)) init-program+ depth)))


(define (depth-iterated-transformations cfilter program+ depth)
  (let* ([db (display-all "CURRENT DEPTH: " depth " SIZE: " (program+->log-prior program+) " SEMANTICS PRESERVED: " (program+->semantics-preserved program+) "  \n\n" )]
         [db (pretty-print (program->sexpr (program+->program program+)))]
         [transformed-programs+ (apply-and-filter-transformations depth cfilter program+)]
         ;;[da (display-all "programs at depth " depth " " transformed-programs+ "\n \n")]
         )
    
    (delete '()  (append transformed-programs+
                         (apply append (map (lambda (prog) (depth-iterated-transformations cfilter prog (- depth 1))) transformed-programs+))))))

(define (apply-and-filter-transformations depth cfilter program+)
 (if (= depth 0)
     '()
     (let* ([semantics-preserved-programs+ (apply-transformations program+ semantic-preserving-transformations #t)]
            [semantics-changed-programs+ (apply-transformations program+ semantic-changing-transformations #f)])
       (cfilter (append semantics-preserved-programs+ semantics-changed-programs+)))))

;;each transformation in transformations returns a list of transformed programs
(define (apply-transformations program+ transformations semantics-preserving)
  (let* ([program (program+->program program+)]
         [transformed-programs (delete '() (concatenate (map (lambda (transform) (transform program)) transformations)))]
         [transformed-programs+ (map (lambda (program) (program+->program-transform semantics-preserving program+ program)) transformed-programs)])
    transformed-programs+))

(define (best-n data programs+ n)
  (max-take (sort-by-posterior data programs+) n))


(define (sort-by-posterior data programs+)
  (let* ([programs (map program+->program programs+)]
         [semantics-flags (map program+->semantics-preserved programs+)]
         [log-priors (map log-prior programs)]
         [log-likelihoods (map (lambda (prog+ semantics-flag)
                                 (if semantics-flag
                                     (program+->log-likelihood prog+)
                                     (log-likelihood data (program+->program prog+) POPSIZE))) programs+ semantics-flags)]
         [da (pretty-print (list "log-priors and log-likelihoods: " (my-list-sort (lambda (a b) (> (third a) (third b))) (zip log-priors log-likelihoods (map + log-priors log-likelihoods) semantics-flags))))]
         [posteriors (map + log-priors log-likelihoods)] 
         [new-programs+ (map make-program+ programs posteriors log-likelihoods log-priors semantics-flags)]
         [posteriors> (lambda (a b) (> (program+->posterior a) (program+->posterior b)))])
    (my-list-sort posteriors> new-programs+)))

;;how do you find normalized values?
(define (log-prior program)
  (- (* SIZE-CONSTANT (program-size program))))

;;;list sorting via something like quicksort
(define (my-list-sort compare lst)
  (if (null? lst)
      '()
      (let* ([pivot (first lst)]
             [lst (rest lst)]
             [lessthan+greaterthan (my-partition compare pivot lst)])
        (append (my-list-sort compare (first lessthan+greaterthan)) (pair pivot (my-list-sort compare (second lessthan+greaterthan)))))))

;;;returns a two item list where the first item is a list of all the elements where (compare item pivot) is true and the second is a list where the values are false
(define (my-partition compare pivot lst)
  (if (null? lst)
      (list '() '())
      (let* ([comparestrue+comparesfalse (my-partition compare pivot (rest lst))]
             [comparestrue (first comparestrue+comparesfalse)]
             [comparesfalse (second comparestrue+comparesfalse)]
             [current-item (first lst)])
        (if (compare current-item pivot)
            (list (pair current-item comparestrue) comparesfalse)
            (list comparestrue (pair current-item comparesfalse))))))
         

(define (combine-size-score sizes scores size-weight score-weight)
  (map +
       (map (lambda (x) (* x size-weight)) sizes)
       (map (lambda (x) (* (exp x) (- score-weight))) scores)))

(define (compose f g)
  (lambda (x) (f (g x))))



;;;computes the likelihood of the data given the prog, should never receive '() as a prog
;;here we assume prog is a thunk we can apply, should be much faster since we don't have to eval
;;computes p(fg_top|compression) only takes into account the topology of a factor-graph
(define single-log-likelihood 
   (lambda (program popsize tree)
     (let* ([new-program (replace-gaussian (desugar program))]
            [da (display-all "prior:  " (log-prior program) "\n")]
            [da (pretty-print "likelihood for program:")]
            [da (pretty-print (program->sexpr program))]
            [model (eval (program->sexpr new-program))]
            [topology-scores+tree-parameters (compute-topology-scores+evaluate model tree popsize)]
            [topology-scores (first topology-scores+tree-parameters)]
            [trees-with-parameters (second topology-scores+tree-parameters)]
            [data-scores (map (lambda (tree-with-parameters) (compute-data-score tree tree-with-parameters)) trees-with-parameters)] ;;remove -inf?
            [scores (delete -inf.0 (map + topology-scores data-scores))]
            [score (if (null? scores)
                        -inf.0
                        (apply log-sum-exp scores))]
            [da (display-all "likelihood:" topology-scores "|" data-scores "|" score "\n\n")]
            )
       score)))

(define (compute-data-score tree tree-with-parameters)
  (let ()
   (if (null? tree)
       0
       (+ (single-data-score (node->data tree) (node->data tree-with-parameters)) (apply + (map compute-data-score (node->children tree) (node->children tree-with-parameters)))))))


(define (single-data-score original-data parameterized-data)
  (let* ([color-score (score-attribute (data->color original-data) (data->color parameterized-data))]
         [size-score (score-attribute (data->size original-data) (data->size parameterized-data))])
    (+ color-score size-score)))
;;assumes attribute only has one value and the only possible parameterization is a gaussian
(define (score-attribute original-attribute parameterized-attribute)
  (if (tagged-list? parameterized-attribute 'gaussian-parameters)
      (log (normal-pdf (first original-attribute) (gaussian->mean parameterized-attribute) (gaussian->variance parameterized-attribute)))
      (if (= (first original-attribute) (first parameterized-attribute)) 0 -inf.0)))

(define (create-smc-core-args model tree popsize)
  (let* ([lazified-tree (list->lazy-list tree)]
         [depths (map list (iota (+ 1 (lazy-list-size  lazified-tree))))]
         [nfqp-creator (lambda (depth)
                         (lambda ()
                           (let ((s (model)))
                             (pair (lazy-topology-equal? s lazified-tree depth)
                                   (lambda () (first (lazy-list->list s depth)))))))])
    (list depths popsize LAG nfqp-creator)))

(define (compute-topology-scores+evaluate model tree popsize)
  (let* ([smc-core-arguments (create-smc-core-args model tree popsize)]
         [samples (apply smc-core smc-core-arguments)]
         [repeat-symbol (find-repeat-symbol samples)]
         ;;[da (pretty-print (list "all samples " (length samples)))]
         ;;remove duplicates in order to do selective model averaging:
         ;;find symbol for repeat function and delete (temporary fix)
         [samples
          (fold (lambda (s a)
                  (if (member (mcmc-state->addrval s repeat-symbol)
                              (map (lambda (x) (mcmc-state->addrval x repeat-symbol)) a))
                      a (pair s a))) '() samples)]
         ;;[da (pretty-print (list "after removal " (length samples)))]
         [topology-scores (map mcmc-state->score samples)]
         [generated-trees (map mcmc-state->query-value samples)])
    (list topology-scores generated-trees)))
;;temporary fix of addresses for same xrps not being the same; this is due to the way smc-core creates the particles
;;the fix works because factor graph programs only contain node expressions and function definition (no uses of repeat)
;;a more permanent fix would be to use the rejection-initializer that can be passed an explicit starting address
;;assumes argument is a list and there is only one address that repeats (if at all) across all xrps

;;need to address the fact that the address containing the repeated address only once will not delete 
(define (mcmc-state->addrval s repeated)
  (map (lambda (d)
         (pair (delete repeated (xrp-draw-address (rest d))) (xrp-draw-value (rest d)))) (mcmc-state->xrp-draws s)))


(define (find-repeat-symbol states)
  (if (null? states)
      '()
      (let ([repeat-symbol (find-repeat-symbol-in-state (map rest (mcmc-state->xrp-draws (first states))))])
        (if (null? repeat-symbol)
            (find-repeat-symbol (rest states))
            repeat-symbol))))

(define (find-repeat-symbol-in-state state-xrp-draws)
  (if (null? state-xrp-draws)
      '()
      (let* ([addr (xrp-draw-address (first state-xrp-draws))]
             [repeat-symbol (find-repeated addr)])
        (if (null? repeat-symbol)
            (find-repeat-symbol-in-state (rest state-xrp-draws))
            repeat-symbol))))

(define (find-repeated addr-lst)
  (if (more-than-one? addr-lst)
      (let ([current (first addr-lst)])
        (if (and (equal? current (second addr-lst)) (not (null? current)))
            current
            (find-repeated (rest addr-lst))))
      '()))

;;assumes argument is a list, move this to util.ss
(define (more-than-one? lst)
  (if (null? lst)
      #f
      (if (null? (rest lst))
              #f
              #t)))

;;;estimates p(trees|program) ~= \frac{1}{R}\sum_{fg_r ~ p(fg|fg_top)}p(trees|fg)p(fg_top|prog) where R is the number of samples
;;;this is an importance sampler where the target distribution generates factor graphs based on topology extracted from the trees
;;assumes all factor-graphs from imags->factor-graphs have the same topology
;; '_' can be read as given e.g. fg-top_prog is fg-top given prog 
(define (log-likelihood trees prog sample-size)
  (apply + (map (lambda (tree) (single-log-likelihood prog sample-size tree)) trees)))


(define (score-parameters program tree)
  0)